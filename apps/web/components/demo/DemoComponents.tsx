'use client';

import React, { useState, useEffect } from 'react';
import { Toggle } from '../ui/toggle';

interface DemoConfig {
  enabled: boolean;
  autoGenerateData: boolean;
  simulateWebhooks: boolean;
  webhookInterval: number;
  showDemoWatermark: boolean;
}

export function DemoModeToggle() {
  const [demoConfig, setDemoConfig] = useState<DemoConfig | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchDemoStatus();
  }, []);

  const fetchDemoStatus = async () => {
    try {
      const response = await fetch('/api/demo/status');
      const data = await response.json();
      
      if (data.success) {
        setDemoConfig(data.data.config);
      }
    } catch (error) {
      console.error('Failed to fetch demo status:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleDemoMode = async () => {
    if (!demoConfig) return;

    try {
      const newConfig = {
        ...demoConfig,
        enabled: !demoConfig.enabled
      };

      const response = await fetch('/api/demo/config', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ config: newConfig })
      });

      const data = await response.json();
      
      if (data.success) {
        setDemoConfig(data.data.config);
      }
    } catch (error) {
      console.error('Failed to toggle demo mode:', error);
    }
  };

  if (loading || !demoConfig) {
    return null;
  }

  return (
    <div className="flex items-center space-x-3 px-4 py-2 bg-background-elevated/50 backdrop-blur-sm rounded-lg border border-border-default">
      <div className="flex items-center space-x-2">
        <div className="w-2 h-2 rounded-full animate-pulse bg-accent-primary" />
        <span className="text-sm font-medium text-text-secondary">Demo Mode</span>
      </div>
      
      <Toggle
        checked={demoConfig.enabled}
        onChange={toggleDemoMode}
        className="transition-all duration-200"
      />
      
      {demoConfig.enabled && (
        <span className="text-xs text-accent-primary font-mono">
          ACTIVE
        </span>
      )}
    </div>
  );
}

export function DemoWatermark() {
  const [showWatermark, setShowWatermark] = useState(false);

  useEffect(() => {
    checkDemoMode();
  }, []);

  const checkDemoMode = async () => {
    try {
      const response = await fetch('/api/demo/status');
      const data = await response.json();
      
      if (data.success && data.data.config.enabled && data.data.config.showDemoWatermark) {
        setShowWatermark(true);
      }
    } catch (error) {
      console.error('Failed to check demo mode:', error);
    }
  };

  if (!showWatermark) {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 pointer-events-none">
      <div className="bg-gradient-to-r from-accent-primary/20 to-accent-secondary/20 backdrop-blur-md rounded-lg px-4 py-2 border border-accent-primary/30">
        <div className="flex items-center space-x-2">
          <div className="w-2 h-2 rounded-full bg-accent-primary animate-pulse" />
          <span className="text-sm font-medium text-text-primary">Demo Mode</span>
        </div>
        <p className="text-xs text-text-secondary mt-1">
          This is simulated data for demonstration
        </p>
      </div>
    </div>
  );
}

export function DemoDataGenerator() {
  const [generating, setGenerating] = useState(false);
  const [scenario, setScenario] = useState<'winning' | 'volatile' | 'steady'>('winning');

  const initializeDemo = async () => {
    setGenerating(true);
    
    try {
      const response = await fetch('/api/demo/initialize', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });

      const data = await response.json();
      
      if (data.success) {
        alert('Demo data generated successfully! Refresh to see your bots.');
      } else {
        alert(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Failed to initialize demo:', error);
      alert('Failed to generate demo data');
    } finally {
      setGenerating(false);
    }
  };

  const generateScenario = async () => {
    setGenerating(true);
    
    try {
      const response = await fetch('/api/demo/scenario', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ scenario })
      });

      const data = await response.json();
      
      if (data.success) {
        alert(`${scenario} scenario generated successfully!`);
      } else {
        alert(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Failed to generate scenario:', error);
      alert('Failed to generate scenario');
    } finally {
      setGenerating(false);
    }
  };

  const cleanupDemo = async () => {
    if (!confirm('This will delete all demo data. Are you sure?')) {
      return;
    }

    setGenerating(true);
    
    try {
      const response = await fetch('/api/demo/cleanup', {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });

      const data = await response.json();
      
      if (data.success) {
        alert('Demo data cleaned up successfully!');
      } else {
        alert(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Failed to cleanup demo:', error);
      alert('Failed to cleanup demo data');
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="bg-background-secondary rounded-xl p-6 border border-border-default">
      <h3 className="text-lg font-semibold text-text-primary mb-4">
        Demo Data Generator
      </h3>
      
      <div className="space-y-4">
        <button
          onClick={initializeDemo}
          disabled={generating}
          className="w-full px-4 py-3 bg-gradient-to-r from-accent-primary to-accent-secondary text-background-primary font-semibold rounded-lg hover:opacity-90 transition-opacity disabled:opacity-50"
        >
          {generating ? 'Generating...' : 'Generate Demo Data'}
        </button>

        <div className="border-t border-border-default pt-4">
          <label className="block text-sm font-medium text-text-secondary mb-2">
            Performance Scenario
          </label>
          
          <div className="grid grid-cols-3 gap-2 mb-3">
            {(['winning', 'volatile', 'steady'] as const).map((s) => (
              <button
                key={s}
                onClick={() => setScenario(s)}
                className={`px-3 py-2 rounded-lg border transition-all ${
                  scenario === s
                    ? 'border-accent-primary bg-accent-primary/10 text-accent-primary'
                    : 'border-border-default text-text-secondary hover:border-border-hover'
                }`}
              >
                {s.charAt(0).toUpperCase() + s.slice(1)}
              </button>
            ))}
          </div>

          <button
            onClick={generateScenario}
            disabled={generating}
            className="w-full px-4 py-2 bg-background-elevated border border-border-default rounded-lg hover:border-accent-primary transition-colors disabled:opacity-50"
          >
            Generate {scenario} Scenario
          </button>
        </div>

        <button
          onClick={cleanupDemo}
          disabled={generating}
          className="w-full px-4 py-2 bg-accent-danger/10 text-accent-danger border border-accent-danger/20 rounded-lg hover:bg-accent-danger/20 transition-colors disabled:opacity-50"
        >
          Clean Up Demo Data
        </button>
      </div>
    </div>
  );
}
