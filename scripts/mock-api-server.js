// Mock API server for demo presentation
const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

// Mock demo data
const mockPresentationData = {
  success: true,
  data: {
    overview: {
      totalBots: 5,
      activeBots: 4,
      totalTrades: 1234,
      totalWebhooks: 5678,
      totalReturn: '+42.5%',
      avgSharpeRatio: '2.1',
      totalFees: 123.45
    },
    bots: [
      {
        id: '1',
        name: 'BTC Momentum Scanner',
        status: 'active',
        assetType: 'crypto',
        exchange: 'coinbase_pro',
        tradingMode: 'paper',
        tradeCount: 342,
        webhookCount: 1234
      },
      {
        id: '2',
        name: 'ETH Grid Trading Bot',
        status: 'active',
        assetType: 'crypto',
        exchange: 'coinbase_pro',
        tradingMode: 'live',
        tradeCount: 256,
        webhookCount: 890
      },
      {
        id: '3',
        name: 'AAPL Swing Trader',
        status: 'active',
        assetType: 'stocks',
        exchange: 'alpaca',
        tradingMode: 'paper',
        tradeCount: 89,
        webhookCount: 234
      },
      {
        id: '4',
        name: 'Tech Stock Scalper',
        status: 'paused',
        assetType: 'stocks',
        exchange: 'alpaca',
        tradingMode: 'live',
        tradeCount: 456,
        webhookCount: 1567
      },
      {
        id: '5',
        name: 'Crypto DCA Strategy',
        status: 'active',
        assetType: 'crypto',
        exchange: 'coinbase_pro',
        tradingMode: 'paper',
        tradeCount: 91,
        webhookCount: 753
      }
    ],
    recentPerformance: [
      { date: '2025-01-20', return: 2.5, sharpeRatio: 2.1 },
      { date: '2025-01-19', return: -0.8, sharpeRatio: 1.9 },
      { date: '2025-01-18', return: 3.2, sharpeRatio: 2.3 },
      { date: '2025-01-17', return: 1.5, sharpeRatio: 2.0 },
      { date: '2025-01-16', return: -1.2, sharpeRatio: 1.8 },
      { date: '2025-01-15', return: 4.1, sharpeRatio: 2.5 },
      { date: '2025-01-14', return: 0.9, sharpeRatio: 2.1 }
    ]
  }
};

// Mock endpoints
app.get('/api/demo/status', (req, res) => {
  res.json({
    success: true,
    data: {
      demoMode: true,
      config: {
        enabled: true,
        autoGenerateData: true,
        simulateWebhooks: true,
        webhookInterval: 30000,
        showDemoWatermark: true
      },
      activeSimulations: 2,
      features: {
        mockData: 'Full trading history with realistic patterns',
        webhookSimulation: 'Live webhook activity simulation',
        performanceMetrics: 'Professional-grade analytics',
        scenarios: ['winning', 'volatile', 'steady']
      }
    }
  });
});

app.get('/api/demo/presentation', (req, res) => {
  res.json(mockPresentationData);
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', mode: 'mock' });
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`ðŸŽ­ Mock API server running on http://localhost:${PORT}`);
  console.log('   This is a temporary mock server for demo purposes');
  console.log('   For full functionality, please set up PostgreSQL and Redis');
});
